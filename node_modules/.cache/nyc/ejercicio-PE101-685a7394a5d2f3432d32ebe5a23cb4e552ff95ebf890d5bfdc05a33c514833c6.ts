"use strict";/* eslint-disable valid-jsdoc */ /* eslint-disable no-array-constructor */ /* eslint-disable max-len */ /* eslint-disable require-jsdoc */function cov_14zz9tm7a3(){var path="/home/usuario/ull-esit-inf-dsi-21-22-prct09-filesystem-notes-app-Pablo400/src/ejercicio-PE101.ts";var hash="603459cdd5db84cbff1d19168c60b470a9fa65b5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/ull-esit-inf-dsi-21-22-prct09-filesystem-notes-app-Pablo400/src/ejercicio-PE101.ts",statementMap:{"0":{start:{line:6,column:0},end:{line:6,column:62}},"1":{start:{line:7,column:0},end:{line:7,column:126}},"2":{start:{line:16,column:8},end:{line:16,column:30}},"3":{start:{line:19,column:8},end:{line:19,column:25}},"4":{start:{line:20,column:8},end:{line:20,column:27}},"5":{start:{line:21,column:8},end:{line:21,column:35}},"6":{start:{line:22,column:8},end:{line:22,column:29}},"7":{start:{line:23,column:8},end:{line:23,column:31}},"8":{start:{line:30,column:8},end:{line:32,column:9}},"9":{start:{line:31,column:12},end:{line:31,column:56}},"10":{start:{line:33,column:8},end:{line:33,column:45}},"11":{start:{line:40,column:0},end:{line:40,column:42}},"12":{start:{line:46,column:8},end:{line:46,column:16}},"13":{start:{line:52,column:27},end:{line:52,column:42}},"14":{start:{line:53,column:8},end:{line:53,column:42}},"15":{start:{line:60,column:8},end:{line:67,column:10}},"16":{start:{line:61,column:12},end:{line:61,column:31}},"17":{start:{line:62,column:32},end:{line:62,column:34}},"18":{start:{line:63,column:12},end:{line:65,column:15}},"19":{start:{line:64,column:16},end:{line:64,column:48}},"20":{start:{line:66,column:12},end:{line:66,column:31}},"21":{start:{line:74,column:8},end:{line:74,column:27}},"22":{start:{line:75,column:18},end:{line:75,column:19}},"23":{start:{line:76,column:8},end:{line:78,column:9}},"24":{start:{line:76,column:21},end:{line:76,column:22}},"25":{start:{line:77,column:12},end:{line:77,column:42}},"26":{start:{line:79,column:8},end:{line:79,column:19}},"27":{start:{line:82,column:0},end:{line:82,column:36}},"28":{start:{line:88,column:8},end:{line:88,column:16}},"29":{start:{line:94,column:27},end:{line:94,column:42}},"30":{start:{line:95,column:8},end:{line:95,column:42}},"31":{start:{line:102,column:8},end:{line:109,column:10}},"32":{start:{line:103,column:12},end:{line:103,column:31}},"33":{start:{line:104,column:32},end:{line:104,column:34}},"34":{start:{line:105,column:12},end:{line:107,column:15}},"35":{start:{line:106,column:16},end:{line:106,column:48}},"36":{start:{line:108,column:12},end:{line:108,column:31}},"37":{start:{line:116,column:8},end:{line:116,column:27}},"38":{start:{line:117,column:18},end:{line:117,column:19}},"39":{start:{line:118,column:8},end:{line:120,column:9}},"40":{start:{line:118,column:21},end:{line:118,column:22}},"41":{start:{line:119,column:12},end:{line:119,column:42}},"42":{start:{line:121,column:8},end:{line:121,column:19}},"43":{start:{line:124,column:0},end:{line:124,column:36}},"44":{start:{line:130,column:8},end:{line:130,column:16}},"45":{start:{line:136,column:27},end:{line:136,column:42}},"46":{start:{line:137,column:8},end:{line:137,column:42}},"47":{start:{line:144,column:8},end:{line:151,column:10}},"48":{start:{line:145,column:12},end:{line:145,column:31}},"49":{start:{line:146,column:32},end:{line:146,column:34}},"50":{start:{line:147,column:12},end:{line:149,column:15}},"51":{start:{line:148,column:16},end:{line:148,column:49}},"52":{start:{line:150,column:12},end:{line:150,column:31}},"53":{start:{line:158,column:8},end:{line:158,column:27}},"54":{start:{line:159,column:19},end:{line:159,column:20}},"55":{start:{line:160,column:8},end:{line:162,column:9}},"56":{start:{line:160,column:21},end:{line:160,column:22}},"57":{start:{line:161,column:12},end:{line:161,column:43}},"58":{start:{line:163,column:8},end:{line:163,column:20}},"59":{start:{line:166,column:0},end:{line:166,column:38}},"60":{start:{line:172,column:8},end:{line:172,column:16}},"61":{start:{line:178,column:27},end:{line:178,column:42}},"62":{start:{line:179,column:8},end:{line:179,column:42}},"63":{start:{line:186,column:8},end:{line:193,column:10}},"64":{start:{line:187,column:12},end:{line:187,column:31}},"65":{start:{line:188,column:32},end:{line:188,column:34}},"66":{start:{line:189,column:12},end:{line:191,column:15}},"67":{start:{line:190,column:16},end:{line:190,column:48}},"68":{start:{line:192,column:12},end:{line:192,column:31}},"69":{start:{line:200,column:8},end:{line:200,column:27}},"70":{start:{line:201,column:18},end:{line:201,column:19}},"71":{start:{line:202,column:8},end:{line:204,column:9}},"72":{start:{line:202,column:21},end:{line:202,column:22}},"73":{start:{line:203,column:12},end:{line:203,column:42}},"74":{start:{line:205,column:8},end:{line:205,column:19}},"75":{start:{line:208,column:0},end:{line:208,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:18},end:{line:17,column:5}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:10},end:{line:24,column:5}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:20},end:{line:34,column:5}},line:29},"3":{name:"(anonymous_3)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:26},end:{line:35,column:29}},line:35},"4":{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:22},end:{line:36,column:25}},line:36},"5":{name:"(anonymous_5)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:30},end:{line:37,column:33}},line:37},"6":{name:"(anonymous_6)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:29},end:{line:38,column:32}},line:38},"7":{name:"(anonymous_7)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:18},end:{line:47,column:5}},line:45},"8":{name:"(anonymous_8)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:18},end:{line:54,column:5}},line:51},"9":{name:"(anonymous_9)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:10},end:{line:68,column:5}},line:59},"10":{name:"(anonymous_10)",decl:{start:{line:60,column:15},end:{line:60,column:16}},loc:{start:{line:60,column:24},end:{line:67,column:9}},line:60},"11":{name:"(anonymous_11)",decl:{start:{line:63,column:40},end:{line:63,column:41}},loc:{start:{line:63,column:53},end:{line:65,column:13}},line:63},"12":{name:"(anonymous_12)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:13},end:{line:80,column:5}},line:73},"13":{name:"(anonymous_13)",decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:18},end:{line:89,column:5}},line:87},"14":{name:"(anonymous_14)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:18},end:{line:96,column:5}},line:93},"15":{name:"(anonymous_15)",decl:{start:{line:101,column:4},end:{line:101,column:5}},loc:{start:{line:101,column:10},end:{line:110,column:5}},line:101},"16":{name:"(anonymous_16)",decl:{start:{line:102,column:15},end:{line:102,column:16}},loc:{start:{line:102,column:24},end:{line:109,column:9}},line:102},"17":{name:"(anonymous_17)",decl:{start:{line:105,column:40},end:{line:105,column:41}},loc:{start:{line:105,column:53},end:{line:107,column:13}},line:105},"18":{name:"(anonymous_18)",decl:{start:{line:115,column:4},end:{line:115,column:5}},loc:{start:{line:115,column:13},end:{line:122,column:5}},line:115},"19":{name:"(anonymous_19)",decl:{start:{line:129,column:4},end:{line:129,column:5}},loc:{start:{line:129,column:18},end:{line:131,column:5}},line:129},"20":{name:"(anonymous_20)",decl:{start:{line:135,column:4},end:{line:135,column:5}},loc:{start:{line:135,column:18},end:{line:138,column:5}},line:135},"21":{name:"(anonymous_21)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:10},end:{line:152,column:5}},line:143},"22":{name:"(anonymous_22)",decl:{start:{line:144,column:15},end:{line:144,column:16}},loc:{start:{line:144,column:25},end:{line:151,column:9}},line:144},"23":{name:"(anonymous_23)",decl:{start:{line:147,column:40},end:{line:147,column:41}},loc:{start:{line:147,column:53},end:{line:149,column:13}},line:147},"24":{name:"(anonymous_24)",decl:{start:{line:157,column:4},end:{line:157,column:5}},loc:{start:{line:157,column:13},end:{line:164,column:5}},line:157},"25":{name:"(anonymous_25)",decl:{start:{line:171,column:4},end:{line:171,column:5}},loc:{start:{line:171,column:18},end:{line:173,column:5}},line:171},"26":{name:"(anonymous_26)",decl:{start:{line:177,column:4},end:{line:177,column:5}},loc:{start:{line:177,column:18},end:{line:180,column:5}},line:177},"27":{name:"(anonymous_27)",decl:{start:{line:185,column:4},end:{line:185,column:5}},loc:{start:{line:185,column:10},end:{line:194,column:5}},line:185},"28":{name:"(anonymous_28)",decl:{start:{line:186,column:15},end:{line:186,column:16}},loc:{start:{line:186,column:24},end:{line:193,column:9}},line:186},"29":{name:"(anonymous_29)",decl:{start:{line:189,column:40},end:{line:189,column:41}},loc:{start:{line:189,column:53},end:{line:191,column:13}},line:189},"30":{name:"(anonymous_30)",decl:{start:{line:199,column:4},end:{line:199,column:5}},loc:{start:{line:199,column:13},end:{line:206,column:5}},line:199}},branchMap:{"0":{loc:{start:{line:30,column:8},end:{line:32,column:9}},type:"if",locations:[{start:{line:30,column:8},end:{line:32,column:9}},{start:{line:30,column:8},end:{line:32,column:9}}],line:30}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/ull-esit-inf-dsi-21-22-prct09-filesystem-notes-app-Pablo400/src/ejercicio-PE101.ts",sources:["/home/usuario/ull-esit-inf-dsi-21-22-prct09-filesystem-notes-app-Pablo400/src/ejercicio-PE101.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable valid-jsdoc */\n/* eslint-disable no-array-constructor */\n/* eslint-disable max-len */\n/* eslint-disable require-jsdoc */\n\n/**\n * Abstract Class\n */\nexport abstract class BasicOperations {\n  protected numberArray: number[][];\n\n  /**\n   * Abstrac Class with the array initialize\n   */\n  constructor() {\n    this.numberArray = [];\n  }\n\n  public run() {\n    this.numberArray;\n\n    this.initNumbers();\n\n    this.afterInitialisation();\n\n    this.evaluateArray();\n\n    this.afterEvaluation();\n  }\n\n  /**\n   * Evaluates an array\n   * @returns Text to know if the array contains elements\n   */\n  public evaluateArray() {\n    if (this.numberArray.length === 0) {\n      return 'El array no contiene ning\xFAn n\xFAmero';\n    }\n\n    return 'El array contiene elementos';\n  }\n\n  /**\n   * Abstract method for all clases\n   */\n  protected abstract initNumbers(): void;\n  protected abstract reduce() : number;\n  protected abstract map(): (n : number) => number[];\n\n  protected afterInitialisation() {}\n  protected afterEvaluation() {}\n  protected afterChildrenGeneration() {}\n  protected afterSurvivorSelection() {}\n}\n\n/**\n * Add Map Reduce Class\n */\nexport class AddMapReduce extends BasicOperations {\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initializes the array\n   */\n  protected initNumbers(): void {\n    const firstArray: number[] = [1, 2, 3, 4, 5];\n\n    this.numberArray.push(firstArray);\n  }\n\n  /**\n   * This function sums the elements of the array by any number\n   * @returns The array elements sum by any number\n   */\n  public map(): (n: number) => number[] {\n    return (sum) => {\n      this.initNumbers();\n      const resultArray: number[] = [];\n\n      this.numberArray[0].forEach((element: number) => {\n        resultArray.push(element + sum);\n      });\n\n      return resultArray;\n    };\n  }\n\n  /**\n   * Reduces the array into a number by doing the sum operation\n   * @returns The sum of all numbers on the array\n   */\n  public reduce(): number {\n    this.initNumbers();\n    let sum: number = 0;\n\n    for (let i = 0; i < this.numberArray[0].length; i++) {\n      sum += this.numberArray[0][i];\n    }\n\n    return sum;\n  }\n}\n\n/**\n * Sub Map Reduce Class\n */\nexport class SubMapReduce extends BasicOperations {\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initializes the array\n   */\n  protected initNumbers(): void {\n    const firstArray: number[] = [1, 2, 3, 4, 5];\n\n    this.numberArray.push(firstArray);\n  }\n\n  /**\n   * This function subs the elements of the array by any number\n   * @returns The array elements sub by any number\n   */\n  public map(): (n: number) => number[] {\n    return (sub) => {\n      this.initNumbers();\n      const resultArray: number[] = [];\n\n      this.numberArray[0].forEach((element: number) => {\n        resultArray.push(element - sub);\n      });\n\n      return resultArray;\n    };\n  }\n\n  /**\n   * Reduces the array into a number by doing the sub operation\n   * @returns The sub of all numbers on the array\n   */\n  public reduce(): number {\n    this.initNumbers();\n    let sub: number = 0;\n\n    for (let i = 0; i < this.numberArray[0].length; i++) {\n      sub -= this.numberArray[0][i];\n    }\n\n    return sub;\n  }\n}\n\n/**\n * Prod Map Reduce Class\n */\nexport class ProdMapReduce extends BasicOperations {\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initializes the array\n   */\n  protected initNumbers(): void {\n    const firstArray: number[] = [1, 2, 3, 4, 5];\n\n    this.numberArray.push(firstArray);\n  }\n\n  /**\n   * This function multiplies the elements of the array by any number\n   * @returns The array elements multiplied by any number\n   */\n  public map(): (n: number) => number[] {\n    return (mult) => {\n      this.initNumbers();\n\n      const resultArray: number[] = [];\n\n      this.numberArray[0].forEach((element: number) => {\n        resultArray.push(element*mult);\n      });\n\n      return resultArray;\n    };\n  }\n\n  /**\n   * Reduces the array into a number by doing the multiplication operation\n   * @returns The multiplication of all numbers on the array\n   */\n  public reduce(): number {\n    this.initNumbers();\n\n    let mult: number = 1;\n\n    for (let i = 0; i < this.numberArray[0].length; i++) {\n      mult *= this.numberArray[0][i];\n    }\n\n    return mult;\n  }\n}\n\n/**\n * Div Map Reduce Class\n */\nexport class DivMapReduce extends BasicOperations {\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initializes de array\n   */\n  protected initNumbers(): void {\n    const firstArray: number[] = [1, 2, 3, 4, 5];\n\n    this.numberArray.push(firstArray);\n  }\n\n  /**\n   * This function divides the elements of the array by any number\n   * @returns The array elements divided by any number\n   */\n  public map(): (n: number) => number[] {\n    return (div) => {\n      this.initNumbers();\n\n      const resultArray: number[] = [];\n\n      this.numberArray[0].forEach((element: number) => {\n        resultArray.push(element/div);\n      });\n\n      return resultArray;\n    };\n  }\n\n  /**\n   * Reduces the array into a number by doing the division operation\n   * @return The division of all numbers on the array\n   */\n  public reduce(): number {\n    this.initNumbers();\n\n    let div: number = 1;\n\n    for (let i = 0; i < this.numberArray[0].length; i++) {\n      div /= this.numberArray[0][i];\n    }\n\n    return div;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"603459cdd5db84cbff1d19168c60b470a9fa65b5"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_14zz9tm7a3=function(){return actualCoverage;};}return actualCoverage;}cov_14zz9tm7a3();cov_14zz9tm7a3().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_14zz9tm7a3().s[1]++;exports.DivMapReduce=exports.ProdMapReduce=exports.SubMapReduce=exports.AddMapReduce=exports.BasicOperations=void 0;/**
 * Abstract Class
 */class BasicOperations{/**
     * Abstrac Class with the array initialize
     */constructor(){cov_14zz9tm7a3().f[0]++;cov_14zz9tm7a3().s[2]++;this.numberArray=[];}run(){cov_14zz9tm7a3().f[1]++;cov_14zz9tm7a3().s[3]++;this.numberArray;cov_14zz9tm7a3().s[4]++;this.initNumbers();cov_14zz9tm7a3().s[5]++;this.afterInitialisation();cov_14zz9tm7a3().s[6]++;this.evaluateArray();cov_14zz9tm7a3().s[7]++;this.afterEvaluation();}/**
     * Evaluates an array
     * @returns Text to know if the array contains elements
     */evaluateArray(){cov_14zz9tm7a3().f[2]++;cov_14zz9tm7a3().s[8]++;if(this.numberArray.length===0){cov_14zz9tm7a3().b[0][0]++;cov_14zz9tm7a3().s[9]++;return'El array no contiene ningún número';}else{cov_14zz9tm7a3().b[0][1]++;}cov_14zz9tm7a3().s[10]++;return'El array contiene elementos';}afterInitialisation(){cov_14zz9tm7a3().f[3]++;}afterEvaluation(){cov_14zz9tm7a3().f[4]++;}afterChildrenGeneration(){cov_14zz9tm7a3().f[5]++;}afterSurvivorSelection(){cov_14zz9tm7a3().f[6]++;}}cov_14zz9tm7a3().s[11]++;exports.BasicOperations=BasicOperations;/**
 * Add Map Reduce Class
 */class AddMapReduce extends BasicOperations{constructor(){cov_14zz9tm7a3().f[7]++;cov_14zz9tm7a3().s[12]++;super();}/**
     * Initializes the array
     */initNumbers(){cov_14zz9tm7a3().f[8]++;const firstArray=(cov_14zz9tm7a3().s[13]++,[1,2,3,4,5]);cov_14zz9tm7a3().s[14]++;this.numberArray.push(firstArray);}/**
     * This function sums the elements of the array by any number
     * @returns The array elements sum by any number
     */map(){cov_14zz9tm7a3().f[9]++;cov_14zz9tm7a3().s[15]++;return sum=>{cov_14zz9tm7a3().f[10]++;cov_14zz9tm7a3().s[16]++;this.initNumbers();const resultArray=(cov_14zz9tm7a3().s[17]++,[]);cov_14zz9tm7a3().s[18]++;this.numberArray[0].forEach(element=>{cov_14zz9tm7a3().f[11]++;cov_14zz9tm7a3().s[19]++;resultArray.push(element+sum);});cov_14zz9tm7a3().s[20]++;return resultArray;};}/**
     * Reduces the array into a number by doing the sum operation
     * @returns The sum of all numbers on the array
     */reduce(){cov_14zz9tm7a3().f[12]++;cov_14zz9tm7a3().s[21]++;this.initNumbers();let sum=(cov_14zz9tm7a3().s[22]++,0);cov_14zz9tm7a3().s[23]++;for(let i=(cov_14zz9tm7a3().s[24]++,0);i<this.numberArray[0].length;i++){cov_14zz9tm7a3().s[25]++;sum+=this.numberArray[0][i];}cov_14zz9tm7a3().s[26]++;return sum;}}cov_14zz9tm7a3().s[27]++;exports.AddMapReduce=AddMapReduce;/**
 * Sub Map Reduce Class
 */class SubMapReduce extends BasicOperations{constructor(){cov_14zz9tm7a3().f[13]++;cov_14zz9tm7a3().s[28]++;super();}/**
     * Initializes the array
     */initNumbers(){cov_14zz9tm7a3().f[14]++;const firstArray=(cov_14zz9tm7a3().s[29]++,[1,2,3,4,5]);cov_14zz9tm7a3().s[30]++;this.numberArray.push(firstArray);}/**
     * This function subs the elements of the array by any number
     * @returns The array elements sub by any number
     */map(){cov_14zz9tm7a3().f[15]++;cov_14zz9tm7a3().s[31]++;return sub=>{cov_14zz9tm7a3().f[16]++;cov_14zz9tm7a3().s[32]++;this.initNumbers();const resultArray=(cov_14zz9tm7a3().s[33]++,[]);cov_14zz9tm7a3().s[34]++;this.numberArray[0].forEach(element=>{cov_14zz9tm7a3().f[17]++;cov_14zz9tm7a3().s[35]++;resultArray.push(element-sub);});cov_14zz9tm7a3().s[36]++;return resultArray;};}/**
     * Reduces the array into a number by doing the sub operation
     * @returns The sub of all numbers on the array
     */reduce(){cov_14zz9tm7a3().f[18]++;cov_14zz9tm7a3().s[37]++;this.initNumbers();let sub=(cov_14zz9tm7a3().s[38]++,0);cov_14zz9tm7a3().s[39]++;for(let i=(cov_14zz9tm7a3().s[40]++,0);i<this.numberArray[0].length;i++){cov_14zz9tm7a3().s[41]++;sub-=this.numberArray[0][i];}cov_14zz9tm7a3().s[42]++;return sub;}}cov_14zz9tm7a3().s[43]++;exports.SubMapReduce=SubMapReduce;/**
 * Prod Map Reduce Class
 */class ProdMapReduce extends BasicOperations{constructor(){cov_14zz9tm7a3().f[19]++;cov_14zz9tm7a3().s[44]++;super();}/**
     * Initializes the array
     */initNumbers(){cov_14zz9tm7a3().f[20]++;const firstArray=(cov_14zz9tm7a3().s[45]++,[1,2,3,4,5]);cov_14zz9tm7a3().s[46]++;this.numberArray.push(firstArray);}/**
     * This function multiplies the elements of the array by any number
     * @returns The array elements multiplied by any number
     */map(){cov_14zz9tm7a3().f[21]++;cov_14zz9tm7a3().s[47]++;return mult=>{cov_14zz9tm7a3().f[22]++;cov_14zz9tm7a3().s[48]++;this.initNumbers();const resultArray=(cov_14zz9tm7a3().s[49]++,[]);cov_14zz9tm7a3().s[50]++;this.numberArray[0].forEach(element=>{cov_14zz9tm7a3().f[23]++;cov_14zz9tm7a3().s[51]++;resultArray.push(element*mult);});cov_14zz9tm7a3().s[52]++;return resultArray;};}/**
     * Reduces the array into a number by doing the multiplication operation
     * @returns The multiplication of all numbers on the array
     */reduce(){cov_14zz9tm7a3().f[24]++;cov_14zz9tm7a3().s[53]++;this.initNumbers();let mult=(cov_14zz9tm7a3().s[54]++,1);cov_14zz9tm7a3().s[55]++;for(let i=(cov_14zz9tm7a3().s[56]++,0);i<this.numberArray[0].length;i++){cov_14zz9tm7a3().s[57]++;mult*=this.numberArray[0][i];}cov_14zz9tm7a3().s[58]++;return mult;}}cov_14zz9tm7a3().s[59]++;exports.ProdMapReduce=ProdMapReduce;/**
 * Div Map Reduce Class
 */class DivMapReduce extends BasicOperations{constructor(){cov_14zz9tm7a3().f[25]++;cov_14zz9tm7a3().s[60]++;super();}/**
     * Initializes de array
     */initNumbers(){cov_14zz9tm7a3().f[26]++;const firstArray=(cov_14zz9tm7a3().s[61]++,[1,2,3,4,5]);cov_14zz9tm7a3().s[62]++;this.numberArray.push(firstArray);}/**
     * This function divides the elements of the array by any number
     * @returns The array elements divided by any number
     */map(){cov_14zz9tm7a3().f[27]++;cov_14zz9tm7a3().s[63]++;return div=>{cov_14zz9tm7a3().f[28]++;cov_14zz9tm7a3().s[64]++;this.initNumbers();const resultArray=(cov_14zz9tm7a3().s[65]++,[]);cov_14zz9tm7a3().s[66]++;this.numberArray[0].forEach(element=>{cov_14zz9tm7a3().f[29]++;cov_14zz9tm7a3().s[67]++;resultArray.push(element/div);});cov_14zz9tm7a3().s[68]++;return resultArray;};}/**
     * Reduces the array into a number by doing the division operation
     * @return The division of all numbers on the array
     */reduce(){cov_14zz9tm7a3().f[30]++;cov_14zz9tm7a3().s[69]++;this.initNumbers();let div=(cov_14zz9tm7a3().s[70]++,1);cov_14zz9tm7a3().s[71]++;for(let i=(cov_14zz9tm7a3().s[72]++,0);i<this.numberArray[0].length;i++){cov_14zz9tm7a3().s[73]++;div/=this.numberArray[0][i];}cov_14zz9tm7a3().s[74]++;return div;}}cov_14zz9tm7a3().s[75]++;exports.DivMapReduce=DivMapReduce;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,